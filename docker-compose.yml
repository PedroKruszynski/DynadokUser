version: "3.8"

services:
  mongodb:
    container_name: mongodb
    image: mongo:8.0
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_DEFAULT_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: ${MYSQL_DEFAULT_DATABASE:-siriodb}
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network

  redis:
    container_name: redis
    image: redis:7.4
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT:-2181}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT:-2181}:${ZOOKEEPER_CLIENT_PORT:-2181}"
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9091
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9091
      - KAFKA_LISTENER_NAME_INTERNAL=INTERNAL
      - KAFKA_LISTENER_INTERNAL_PORT=9093
      - KAFKA_LISTENER_INTERNAL=INTERNAL
      - KAFKA_LISTENER_PORT=${KAFKA_PORT:-9092}

      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_CLIENT_PORT:-2181}
      
      - KAFKA_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE=false
      
      - KAFKA_LISTENER_HOSTNAME=0.0.0.0

      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_AUTO_CREATE_TOPICS_ENABLE:-true}
      - KAFKA_DEFAULT_TOPIC=${KAFKA_DEFAULT_TOPIC:-travel-log}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - "${KAFKA_PORT:-9092}:${KAFKA_PORT:-9092}"
      - "${KAFKA_HOST_PORT:-9091}:${KAFKA_HOST_PORT:-9091}"
    depends_on:
      - zookeeper
    networks:
      - kafka_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_PORT:-9092}
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    networks:
      - kafka_network

  app:
    container_name: app
    build:
      context: .
      dockerfile: app.Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      MONGO_HOST: mongodb
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
    command: ["yarn", "start"]
    depends_on:
      - mongodb
      - redis
      - zookeeper
      - kafka
    networks:
      - app_network
      - kafka_network

volumes:
  mongodb_data:
    driver: local

networks:
  app_network:
    driver: bridge
  kafka_network:
    driver: bridge